dist
*.pyc
__pycache__
.pytest*
venv/*
docs/_build
test_results/*
test_tmp/*
.DS_Store
.idea
.coverage
.vscode

# Boilerplate
*.py[cod]

# C extensions
*.so

# Packages
*.egg
*.egg-info
build
eggs
parts
bin
var
sdist
develop-eggs
.installed.cfg
lib
lib64
*.zip

# Installer logs
pip-log.txt

# Unit test / coverage reports
.tox
nosetests.xml

# Translations
*.mo

# Mr Developer
.mr.developer.cfg
.project
.pydevproject

# Ignore vim files
*.swp
*.swo

# Ignore generated rst
docs/src/modules.rst
docs/src/use_mock*

# Ignore env folder
env/
.vscode

# Navaneeth's Scracth File
granule_metadata_extractor/src/scratch1.py
granule_metadata_extractor/src/scratch.py
env.sh

# Terraform
.terraform
.terraform.lock.hcl
terraform.tfstate
terraform.tfstate.backup

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Exclude all .tfvars files, which are likely to contain sentitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
#
*.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc



